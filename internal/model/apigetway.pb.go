// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc1
// source: apigetway.proto

// имя пакета, в результирующем go-файле это сохраниться

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Вспомогательные структуры
type OrderSORT int32

const (
	OrderSORT_SORT_DESC OrderSORT = 0
	OrderSORT_SORT_ASC  OrderSORT = 1
)

// Enum value maps for OrderSORT.
var (
	OrderSORT_name = map[int32]string{
		0: "SORT_DESC",
		1: "SORT_ASC",
	}
	OrderSORT_value = map[string]int32{
		"SORT_DESC": 0,
		"SORT_ASC":  1,
	}
)

func (x OrderSORT) Enum() *OrderSORT {
	p := new(OrderSORT)
	*p = x
	return p
}

func (x OrderSORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSORT) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[0].Descriptor()
}

func (OrderSORT) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[0]
}

func (x OrderSORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSORT.Descriptor instead.
func (OrderSORT) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{0}
}

type FIELD_SORT int32

const (
	FIELD_SORT_FIELD_ID    FIELD_SORT = 0
	FIELD_SORT_FIELD_TITLE FIELD_SORT = 1
	FIELD_SORT_FIELD_DESC  FIELD_SORT = 2
	FIELD_SORT_FIELD_DATE  FIELD_SORT = 3
	FIELD_SORT_FIELD_URL   FIELD_SORT = 4
)

// Enum value maps for FIELD_SORT.
var (
	FIELD_SORT_name = map[int32]string{
		0: "FIELD_ID",
		1: "FIELD_TITLE",
		2: "FIELD_DESC",
		3: "FIELD_DATE",
		4: "FIELD_URL",
	}
	FIELD_SORT_value = map[string]int32{
		"FIELD_ID":    0,
		"FIELD_TITLE": 1,
		"FIELD_DESC":  2,
		"FIELD_DATE":  3,
		"FIELD_URL":   4,
	}
)

func (x FIELD_SORT) Enum() *FIELD_SORT {
	p := new(FIELD_SORT)
	*p = x
	return p
}

func (x FIELD_SORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FIELD_SORT) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[1].Descriptor()
}

func (FIELD_SORT) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[1]
}

func (x FIELD_SORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FIELD_SORT.Descriptor instead.
func (FIELD_SORT) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{1}
}

type OptionSearch int32

const (
	OptionSearch_WholeWord       OptionSearch = 0
	OptionSearch_WordPart        OptionSearch = 1
	OptionSearch_WordExclude     OptionSearch = 2
	OptionSearch_WordPartExclude OptionSearch = 3
)

// Enum value maps for OptionSearch.
var (
	OptionSearch_name = map[int32]string{
		0: "WholeWord",
		1: "WordPart",
		2: "WordExclude",
		3: "WordPartExclude",
	}
	OptionSearch_value = map[string]int32{
		"WholeWord":       0,
		"WordPart":        1,
		"WordExclude":     2,
		"WordPartExclude": 3,
	}
)

func (x OptionSearch) Enum() *OptionSearch {
	p := new(OptionSearch)
	*p = x
	return p
}

func (x OptionSearch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionSearch) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[2].Descriptor()
}

func (OptionSearch) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[2]
}

func (x OptionSearch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionSearch.Descriptor instead.
func (OptionSearch) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{2}
}

type ShortNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// номер записи
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// заголовок публикации
	Title   string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`  // содержание публикации
	PubTime int64  `protobuf:"varint,4,opt,name=PubTime,proto3" json:"PubTime,omitempty"` // время публикации
	Link    string `protobuf:"bytes,5,opt,name=Link,proto3" json:"Link,omitempty"`        // ссылка на источник
	Hash    int64  `protobuf:"varint,6,opt,name=Hash,proto3" json:"Hash,omitempty"`       //Хеш  новости
}

func (x *ShortNew) Reset() {
	*x = ShortNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortNew) ProtoMessage() {}

func (x *ShortNew) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortNew.ProtoReflect.Descriptor instead.
func (*ShortNew) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{0}
}

func (x *ShortNew) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ShortNew) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShortNew) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ShortNew) GetPubTime() int64 {
	if x != nil {
		return x.PubTime
	}
	return 0
}

func (x *ShortNew) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ShortNew) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type FullNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	News      *ShortNew          `protobuf:"bytes,1,opt,name=News,proto3" json:"News,omitempty"`
	Commments map[int64]*Comment `protobuf:"bytes,2,rep,name=Commments,proto3" json:"Commments,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FullNew) Reset() {
	*x = FullNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullNew) ProtoMessage() {}

func (x *FullNew) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullNew.ProtoReflect.Descriptor instead.
func (*FullNew) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{1}
}

func (x *FullNew) GetNews() *ShortNew {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *FullNew) GetCommments() map[int64]*Comment {
	if x != nil {
		return x.Commments
	}
	return nil
}

type Forlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Forlist) Reset() {
	*x = Forlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forlist) ProtoMessage() {}

func (x *Forlist) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forlist.ProtoReflect.Descriptor instead.
func (*Forlist) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{2}
}

func (x *Forlist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{3}
}

func (x *Page) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Page) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{4}
}

func (x *Id) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ArrayShortNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array []*ShortNew `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
}

func (x *ArrayShortNews) Reset() {
	*x = ArrayShortNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayShortNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayShortNews) ProtoMessage() {}

func (x *ArrayShortNews) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayShortNews.ProtoReflect.Descriptor instead.
func (*ArrayShortNews) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{5}
}

func (x *ArrayShortNews) GetArray() []*ShortNew {
	if x != nil {
		return x.Array
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int64    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Error []string `protobuf:"bytes,2,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{6}
}

func (x *Result) GetRet() int64 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Result) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

type OptionSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field FIELD_SORT `protobuf:"varint,1,opt,name=field,proto3,enum=rpc_news.FIELD_SORT" json:"field,omitempty"`
	Sort  OrderSORT  `protobuf:"varint,2,opt,name=sort,proto3,enum=rpc_news.OrderSORT" json:"sort,omitempty"`
}

func (x *OptionSort) Reset() {
	*x = OptionSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionSort) ProtoMessage() {}

func (x *OptionSort) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionSort.ProtoReflect.Descriptor instead.
func (*OptionSort) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{7}
}

func (x *OptionSort) GetField() FIELD_SORT {
	if x != nil {
		return x.Field
	}
	return FIELD_SORT_FIELD_ID
}

func (x *OptionSort) GetSort() OrderSORT {
	if x != nil {
		return x.Sort
	}
	return OrderSORT_SORT_DESC
}

type FindWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string       `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Option OptionSearch `protobuf:"varint,2,opt,name=option,proto3,enum=rpc_news.OptionSearch" json:"option,omitempty"`
}

func (x *FindWord) Reset() {
	*x = FindWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWord) ProtoMessage() {}

func (x *FindWord) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWord.ProtoReflect.Descriptor instead.
func (*FindWord) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{8}
}

func (x *FindWord) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FindWord) GetOption() OptionSearch {
	if x != nil {
		return x.Option
	}
	return OptionSearch_WholeWord
}

type FilterDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Startdate int64 `protobuf:"varint,1,opt,name=startdate,proto3" json:"startdate,omitempty"`
	Enddate   int64 `protobuf:"varint,2,opt,name=enddate,proto3" json:"enddate,omitempty"`
}

func (x *FilterDate) Reset() {
	*x = FilterDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDate) ProtoMessage() {}

func (x *FilterDate) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDate.ProtoReflect.Descriptor instead.
func (*FilterDate) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{9}
}

func (x *FilterDate) GetStartdate() int64 {
	if x != nil {
		return x.Startdate
	}
	return 0
}

func (x *FilterDate) GetEnddate() int64 {
	if x != nil {
		return x.Enddate
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word   *FindWord   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Sort   *OptionSort `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	Period *FilterDate `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{10}
}

func (x *Filter) GetWord() *FindWord {
	if x != nil {
		return x.Word
	}
	return nil
}

func (x *Filter) GetSort() *OptionSort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *Filter) GetPeriod() *FilterDate {
	if x != nil {
		return x.Period
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int64             `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Parent   *int64             `protobuf:"varint,2,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	Content  string             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Idnews   int64              `protobuf:"varint,4,opt,name=idnews,proto3" json:"idnews,omitempty"`
	Authorid int64              `protobuf:"varint,5,opt,name=authorid,proto3" json:"authorid,omitempty"`
	Time     int64              `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	Child    map[int64]*Comment `protobuf:"bytes,8,rep,name=child,proto3" json:"child,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{11}
}

func (x *Comment) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Comment) GetParent() int64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetIdnews() int64 {
	if x != nil {
		return x.Idnews
	}
	return 0
}

func (x *Comment) GetAuthorid() int64 {
	if x != nil {
		return x.Authorid
	}
	return 0
}

func (x *Comment) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Comment) GetChild() map[int64]*Comment {
	if x != nil {
		return x.Child
	}
	return nil
}

type TreeComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments map[int64]*Comment `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TreeComments) Reset() {
	*x = TreeComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeComments) ProtoMessage() {}

func (x *TreeComments) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeComments.ProtoReflect.Descriptor instead.
func (*TreeComments) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{12}
}

func (x *TreeComments) GetComments() map[int64]*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

var File_apigetway_proto protoreflect.FileDescriptor

var file_apigetway_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x67, 0x65, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x75, 0x62, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc2, 0x01, 0x0a, 0x07, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x0a, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x65, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x4f,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x19, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x18, 0x0a, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x4f, 0x52,
	0x54, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x52, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x57,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2c,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xb9, 0x02, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x1a, 0x4b, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x28, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x4f, 0x52, 0x54, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53,
	0x4f, 0x52, 0x54, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10,
	0x04, 0x2a, 0x51, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x10, 0x03, 0x32, 0x9c, 0x02, 0x0a, 0x0a, 0x52, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x12,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x65, 0x77, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x73, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77,
	0x73, 0x22, 0x00, 0x32, 0xb6, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x2e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apigetway_proto_rawDescOnce sync.Once
	file_apigetway_proto_rawDescData = file_apigetway_proto_rawDesc
)

func file_apigetway_proto_rawDescGZIP() []byte {
	file_apigetway_proto_rawDescOnce.Do(func() {
		file_apigetway_proto_rawDescData = protoimpl.X.CompressGZIP(file_apigetway_proto_rawDescData)
	})
	return file_apigetway_proto_rawDescData
}

var file_apigetway_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_apigetway_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_apigetway_proto_goTypes = []interface{}{
	(OrderSORT)(0),         // 0: rpc_news.OrderSORT
	(FIELD_SORT)(0),        // 1: rpc_news.FIELD_SORT
	(OptionSearch)(0),      // 2: rpc_news.OptionSearch
	(*ShortNew)(nil),       // 3: rpc_news.ShortNew
	(*FullNew)(nil),        // 4: rpc_news.FullNew
	(*Forlist)(nil),        // 5: rpc_news.Forlist
	(*Page)(nil),           // 6: rpc_news.Page
	(*Id)(nil),             // 7: rpc_news.Id
	(*ArrayShortNews)(nil), // 8: rpc_news.ArrayShortNews
	(*Result)(nil),         // 9: rpc_news.Result
	(*OptionSort)(nil),     // 10: rpc_news.optionSort
	(*FindWord)(nil),       // 11: rpc_news.FindWord
	(*FilterDate)(nil),     // 12: rpc_news.FilterDate
	(*Filter)(nil),         // 13: rpc_news.Filter
	(*Comment)(nil),        // 14: rpc_news.Comment
	(*TreeComments)(nil),   // 15: rpc_news.TreeComments
	nil,                    // 16: rpc_news.FullNew.CommmentsEntry
	nil,                    // 17: rpc_news.Comment.ChildEntry
	nil,                    // 18: rpc_news.TreeComments.CommentsEntry
}
var file_apigetway_proto_depIdxs = []int32{
	3,  // 0: rpc_news.FullNew.News:type_name -> rpc_news.ShortNew
	16, // 1: rpc_news.FullNew.Commments:type_name -> rpc_news.FullNew.CommmentsEntry
	3,  // 2: rpc_news.ArrayShortNews.array:type_name -> rpc_news.ShortNew
	1,  // 3: rpc_news.optionSort.field:type_name -> rpc_news.FIELD_SORT
	0,  // 4: rpc_news.optionSort.sort:type_name -> rpc_news.OrderSORT
	2,  // 5: rpc_news.FindWord.option:type_name -> rpc_news.OptionSearch
	11, // 6: rpc_news.Filter.word:type_name -> rpc_news.FindWord
	10, // 7: rpc_news.Filter.sort:type_name -> rpc_news.optionSort
	12, // 8: rpc_news.Filter.period:type_name -> rpc_news.FilterDate
	17, // 9: rpc_news.Comment.child:type_name -> rpc_news.Comment.ChildEntry
	18, // 10: rpc_news.TreeComments.comments:type_name -> rpc_news.TreeComments.CommentsEntry
	14, // 11: rpc_news.FullNew.CommmentsEntry.value:type_name -> rpc_news.Comment
	14, // 12: rpc_news.Comment.ChildEntry.value:type_name -> rpc_news.Comment
	14, // 13: rpc_news.TreeComments.CommentsEntry.value:type_name -> rpc_news.Comment
	3,  // 14: rpc_news.RssService.AddNews:input_type -> rpc_news.ShortNew
	5,  // 15: rpc_news.RssService.List:input_type -> rpc_news.Forlist
	6,  // 16: rpc_news.RssService.ListPage:input_type -> rpc_news.Page
	5,  // 17: rpc_news.RssService.GetNews:input_type -> rpc_news.Forlist
	13, // 18: rpc_news.RssService.Search:input_type -> rpc_news.Filter
	14, // 19: rpc_news.CommentService.AddComment:input_type -> rpc_news.Comment
	5,  // 20: rpc_news.CommentService.DelComment:input_type -> rpc_news.Forlist
	5,  // 21: rpc_news.CommentService.TreeComment:input_type -> rpc_news.Forlist
	9,  // 22: rpc_news.RssService.AddNews:output_type -> rpc_news.Result
	8,  // 23: rpc_news.RssService.List:output_type -> rpc_news.ArrayShortNews
	8,  // 24: rpc_news.RssService.ListPage:output_type -> rpc_news.ArrayShortNews
	3,  // 25: rpc_news.RssService.GetNews:output_type -> rpc_news.ShortNew
	8,  // 26: rpc_news.RssService.Search:output_type -> rpc_news.ArrayShortNews
	9,  // 27: rpc_news.CommentService.AddComment:output_type -> rpc_news.Result
	9,  // 28: rpc_news.CommentService.DelComment:output_type -> rpc_news.Result
	15, // 29: rpc_news.CommentService.TreeComment:output_type -> rpc_news.TreeComments
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_apigetway_proto_init() }
func file_apigetway_proto_init() {
	if File_apigetway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apigetway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayShortNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_apigetway_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apigetway_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_apigetway_proto_goTypes,
		DependencyIndexes: file_apigetway_proto_depIdxs,
		EnumInfos:         file_apigetway_proto_enumTypes,
		MessageInfos:      file_apigetway_proto_msgTypes,
	}.Build()
	File_apigetway_proto = out.File
	file_apigetway_proto_rawDesc = nil
	file_apigetway_proto_goTypes = nil
	file_apigetway_proto_depIdxs = nil
}
