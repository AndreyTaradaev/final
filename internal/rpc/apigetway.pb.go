// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0--rc1
// source: apigetway.proto

// имя пакета, в результирующем go-файле это сохраниться

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Вспомогательные структуры
type OrderSORT int32

const (
	OrderSORT_SORT_DESC OrderSORT = 0
	OrderSORT_SORT_ASC  OrderSORT = 1
)

// Enum value maps for OrderSORT.
var (
	OrderSORT_name = map[int32]string{
		0: "SORT_DESC",
		1: "SORT_ASC",
	}
	OrderSORT_value = map[string]int32{
		"SORT_DESC": 0,
		"SORT_ASC":  1,
	}
)

func (x OrderSORT) Enum() *OrderSORT {
	p := new(OrderSORT)
	*p = x
	return p
}

func (x OrderSORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSORT) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[0].Descriptor()
}

func (OrderSORT) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[0]
}

func (x OrderSORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSORT.Descriptor instead.
func (OrderSORT) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{0}
}

type FIELD_SORT int32

const (
	FIELD_SORT_FIELD_ID    FIELD_SORT = 0
	FIELD_SORT_FIELD_TITLE FIELD_SORT = 1
	FIELD_SORT_FIELD_DESC  FIELD_SORT = 2
	FIELD_SORT_FIELD_DATE  FIELD_SORT = 3
	FIELD_SORT_FIELD_URL   FIELD_SORT = 4
)

// Enum value maps for FIELD_SORT.
var (
	FIELD_SORT_name = map[int32]string{
		0: "FIELD_ID",
		1: "FIELD_TITLE",
		2: "FIELD_DESC",
		3: "FIELD_DATE",
		4: "FIELD_URL",
	}
	FIELD_SORT_value = map[string]int32{
		"FIELD_ID":    0,
		"FIELD_TITLE": 1,
		"FIELD_DESC":  2,
		"FIELD_DATE":  3,
		"FIELD_URL":   4,
	}
)

func (x FIELD_SORT) Enum() *FIELD_SORT {
	p := new(FIELD_SORT)
	*p = x
	return p
}

func (x FIELD_SORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FIELD_SORT) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[1].Descriptor()
}

func (FIELD_SORT) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[1]
}

func (x FIELD_SORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FIELD_SORT.Descriptor instead.
func (FIELD_SORT) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{1}
}

type OptionSearch int32

const (
	OptionSearch_WholeWord       OptionSearch = 0
	OptionSearch_WordPart        OptionSearch = 1
	OptionSearch_WordExclude     OptionSearch = 2
	OptionSearch_WordPartExclude OptionSearch = 3
)

// Enum value maps for OptionSearch.
var (
	OptionSearch_name = map[int32]string{
		0: "WholeWord",
		1: "WordPart",
		2: "WordExclude",
		3: "WordPartExclude",
	}
	OptionSearch_value = map[string]int32{
		"WholeWord":       0,
		"WordPart":        1,
		"WordExclude":     2,
		"WordPartExclude": 3,
	}
)

func (x OptionSearch) Enum() *OptionSearch {
	p := new(OptionSearch)
	*p = x
	return p
}

func (x OptionSearch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionSearch) Descriptor() protoreflect.EnumDescriptor {
	return file_apigetway_proto_enumTypes[2].Descriptor()
}

func (OptionSearch) Type() protoreflect.EnumType {
	return &file_apigetway_proto_enumTypes[2]
}

func (x OptionSearch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionSearch.Descriptor instead.
func (OptionSearch) EnumDescriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{2}
}

type ShortNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// номер записи
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// заголовок публикации
	Title       string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"` // содержание публикации
	Time        int64  `protobuf:"varint,4,opt,name=Time,proto3" json:"Time,omitempty"`              // время публикации
	Url         string `protobuf:"bytes,5,opt,name=Url,proto3" json:"Url,omitempty"`                 // ссылка на источник
	Hash        int64  `protobuf:"varint,6,opt,name=Hash,proto3" json:"Hash,omitempty"`              //Хеш  новости
}

func (x *ShortNew) Reset() {
	*x = ShortNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortNew) ProtoMessage() {}

func (x *ShortNew) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortNew.ProtoReflect.Descriptor instead.
func (*ShortNew) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{0}
}

func (x *ShortNew) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ShortNew) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShortNew) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShortNew) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ShortNew) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ShortNew) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type Forlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Forlist) Reset() {
	*x = Forlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forlist) ProtoMessage() {}

func (x *Forlist) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forlist.ProtoReflect.Descriptor instead.
func (*Forlist) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{1}
}

func (x *Forlist) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  uint32 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{2}
}

func (x *Page) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Page) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{3}
}

func (x *Id) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ArrayShortNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sl []*ShortNew `protobuf:"bytes,1,rep,name=Sl,proto3" json:"Sl,omitempty"`
}

func (x *ArrayShortNews) Reset() {
	*x = ArrayShortNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayShortNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayShortNews) ProtoMessage() {}

func (x *ArrayShortNews) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayShortNews.ProtoReflect.Descriptor instead.
func (*ArrayShortNews) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{4}
}

func (x *ArrayShortNews) GetSl() []*ShortNew {
	if x != nil {
		return x.Sl
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   int64    `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Error []string `protobuf:"bytes,2,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{5}
}

func (x *Result) GetRet() int64 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *Result) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

type OptionSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field FIELD_SORT `protobuf:"varint,1,opt,name=Field,proto3,enum=rpc_news.FIELD_SORT" json:"Field,omitempty"`
	Sort  OrderSORT  `protobuf:"varint,2,opt,name=Sort,proto3,enum=rpc_news.OrderSORT" json:"Sort,omitempty"`
}

func (x *OptionSort) Reset() {
	*x = OptionSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionSort) ProtoMessage() {}

func (x *OptionSort) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionSort.ProtoReflect.Descriptor instead.
func (*OptionSort) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{6}
}

func (x *OptionSort) GetField() FIELD_SORT {
	if x != nil {
		return x.Field
	}
	return FIELD_SORT_FIELD_ID
}

func (x *OptionSort) GetSort() OrderSORT {
	if x != nil {
		return x.Sort
	}
	return OrderSORT_SORT_DESC
}

type FindWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string       `protobuf:"bytes,1,opt,name=Search,proto3" json:"Search,omitempty"`
	Option OptionSearch `protobuf:"varint,2,opt,name=Option,proto3,enum=rpc_news.OptionSearch" json:"Option,omitempty"`
}

func (x *FindWord) Reset() {
	*x = FindWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindWord) ProtoMessage() {}

func (x *FindWord) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindWord.ProtoReflect.Descriptor instead.
func (*FindWord) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{7}
}

func (x *FindWord) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FindWord) GetOption() OptionSearch {
	if x != nil {
		return x.Option
	}
	return OptionSearch_WholeWord
}

type FilterDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate int64 `protobuf:"varint,1,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate   int64 `protobuf:"varint,2,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
}

func (x *FilterDate) Reset() {
	*x = FilterDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterDate) ProtoMessage() {}

func (x *FilterDate) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterDate.ProtoReflect.Descriptor instead.
func (*FilterDate) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{8}
}

func (x *FilterDate) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *FilterDate) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Word   *FindWord   `protobuf:"bytes,1,opt,name=Word,proto3" json:"Word,omitempty"`
	Sort   *OptionSort `protobuf:"bytes,2,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Period *FilterDate `protobuf:"bytes,3,opt,name=Period,proto3" json:"Period,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{9}
}

func (x *Filter) GetWord() *FindWord {
	if x != nil {
		return x.Word
	}
	return nil
}

func (x *Filter) GetSort() *OptionSort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *Filter) GetPeriod() *FilterDate {
	if x != nil {
		return x.Period
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdComment int64  `protobuf:"varint,1,opt,name=IdComment,proto3" json:"IdComment,omitempty"`
	Parent    int64  `protobuf:"varint,2,opt,name=Parent,proto3" json:"Parent,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	IdNews    int64  `protobuf:"varint,4,opt,name=IdNews,proto3" json:"IdNews,omitempty"`
	Time      int64  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{10}
}

func (x *Comment) GetIdComment() int64 {
	if x != nil {
		return x.IdComment
	}
	return 0
}

func (x *Comment) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetIdNews() int64 {
	if x != nil {
		return x.IdNews
	}
	return 0
}

func (x *Comment) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type BranchComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parrent *Comment   `protobuf:"bytes,1,opt,name=Parrent,proto3" json:"Parrent,omitempty"`
	Child   []*Comment `protobuf:"bytes,2,rep,name=Child,proto3" json:"Child,omitempty"`
}

func (x *BranchComment) Reset() {
	*x = BranchComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchComment) ProtoMessage() {}

func (x *BranchComment) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchComment.ProtoReflect.Descriptor instead.
func (*BranchComment) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{11}
}

func (x *BranchComment) GetParrent() *Comment {
	if x != nil {
		return x.Parrent
	}
	return nil
}

func (x *BranchComment) GetChild() []*Comment {
	if x != nil {
		return x.Child
	}
	return nil
}

type TreeComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdNews   int64            `protobuf:"varint,1,opt,name=idNews,proto3" json:"idNews,omitempty"`
	Comments []*BranchComment `protobuf:"bytes,2,rep,name=Comments,proto3" json:"Comments,omitempty"`
}

func (x *TreeComments) Reset() {
	*x = TreeComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apigetway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeComments) ProtoMessage() {}

func (x *TreeComments) ProtoReflect() protoreflect.Message {
	mi := &file_apigetway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeComments.ProtoReflect.Descriptor instead.
func (*TreeComments) Descriptor() ([]byte, []int) {
	return file_apigetway_proto_rawDescGZIP(), []int{12}
}

func (x *TreeComments) GetIdNews() int64 {
	if x != nil {
		return x.IdNews
	}
	return 0
}

func (x *TreeComments) GetComments() []*BranchComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

var File_apigetway_proto protoreflect.FileDescriptor

var file_apigetway_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x67, 0x65, 0x74, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0x1f, 0x0a, 0x07, 0x46, 0x6f,
	0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x18, 0x0a,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x02, 0x53, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x02, 0x53, 0x6c, 0x22, 0x30, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x61, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x4f,
	0x52, 0x54, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x4f, 0x52, 0x54, 0x52, 0x04, 0x53, 0x6f,
	0x72, 0x74, 0x22, 0x52, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77,
	0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x4a,
	0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x65,
	0x0a, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x50, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2a, 0x28, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x4f, 0x52, 0x54, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x0a,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x68, 0x6f, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x10, 0x03, 0x32, 0x9c, 0x02, 0x0a, 0x0a,
	0x52, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x1a, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65,
	0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x22, 0x00, 0x32, 0x81, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x10,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x46, 0x6f, 0x72,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x42, 0x08,
	0x5a, 0x06, 0x2e, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apigetway_proto_rawDescOnce sync.Once
	file_apigetway_proto_rawDescData = file_apigetway_proto_rawDesc
)

func file_apigetway_proto_rawDescGZIP() []byte {
	file_apigetway_proto_rawDescOnce.Do(func() {
		file_apigetway_proto_rawDescData = protoimpl.X.CompressGZIP(file_apigetway_proto_rawDescData)
	})
	return file_apigetway_proto_rawDescData
}

var file_apigetway_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_apigetway_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_apigetway_proto_goTypes = []interface{}{
	(OrderSORT)(0),         // 0: rpc_news.OrderSORT
	(FIELD_SORT)(0),        // 1: rpc_news.FIELD_SORT
	(OptionSearch)(0),      // 2: rpc_news.OptionSearch
	(*ShortNew)(nil),       // 3: rpc_news.ShortNew
	(*Forlist)(nil),        // 4: rpc_news.Forlist
	(*Page)(nil),           // 5: rpc_news.Page
	(*Id)(nil),             // 6: rpc_news.Id
	(*ArrayShortNews)(nil), // 7: rpc_news.ArrayShortNews
	(*Result)(nil),         // 8: rpc_news.Result
	(*OptionSort)(nil),     // 9: rpc_news.optionSort
	(*FindWord)(nil),       // 10: rpc_news.FindWord
	(*FilterDate)(nil),     // 11: rpc_news.FilterDate
	(*Filter)(nil),         // 12: rpc_news.Filter
	(*Comment)(nil),        // 13: rpc_news.Comment
	(*BranchComment)(nil),  // 14: rpc_news.branchComment
	(*TreeComments)(nil),   // 15: rpc_news.TreeComments
}
var file_apigetway_proto_depIdxs = []int32{
	3,  // 0: rpc_news.ArrayShortNews.Sl:type_name -> rpc_news.ShortNew
	1,  // 1: rpc_news.optionSort.Field:type_name -> rpc_news.FIELD_SORT
	0,  // 2: rpc_news.optionSort.Sort:type_name -> rpc_news.OrderSORT
	2,  // 3: rpc_news.FindWord.Option:type_name -> rpc_news.OptionSearch
	10, // 4: rpc_news.Filter.Word:type_name -> rpc_news.FindWord
	9,  // 5: rpc_news.Filter.Sort:type_name -> rpc_news.optionSort
	11, // 6: rpc_news.Filter.Period:type_name -> rpc_news.FilterDate
	13, // 7: rpc_news.branchComment.Parrent:type_name -> rpc_news.Comment
	13, // 8: rpc_news.branchComment.Child:type_name -> rpc_news.Comment
	14, // 9: rpc_news.TreeComments.Comments:type_name -> rpc_news.branchComment
	3,  // 10: rpc_news.RssService.AddNews:input_type -> rpc_news.ShortNew
	4,  // 11: rpc_news.RssService.List:input_type -> rpc_news.Forlist
	5,  // 12: rpc_news.RssService.ListPage:input_type -> rpc_news.Page
	4,  // 13: rpc_news.RssService.GetNews:input_type -> rpc_news.Forlist
	12, // 14: rpc_news.RssService.Search:input_type -> rpc_news.Filter
	13, // 15: rpc_news.CommentService.AddComment:input_type -> rpc_news.Comment
	4,  // 16: rpc_news.CommentService.TreeComment:input_type -> rpc_news.Forlist
	8,  // 17: rpc_news.RssService.AddNews:output_type -> rpc_news.Result
	7,  // 18: rpc_news.RssService.List:output_type -> rpc_news.ArrayShortNews
	7,  // 19: rpc_news.RssService.ListPage:output_type -> rpc_news.ArrayShortNews
	3,  // 20: rpc_news.RssService.GetNews:output_type -> rpc_news.ShortNew
	7,  // 21: rpc_news.RssService.Search:output_type -> rpc_news.ArrayShortNews
	8,  // 22: rpc_news.CommentService.AddComment:output_type -> rpc_news.Result
	15, // 23: rpc_news.CommentService.TreeComment:output_type -> rpc_news.TreeComments
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_apigetway_proto_init() }
func file_apigetway_proto_init() {
	if File_apigetway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apigetway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayShortNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apigetway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apigetway_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_apigetway_proto_goTypes,
		DependencyIndexes: file_apigetway_proto_depIdxs,
		EnumInfos:         file_apigetway_proto_enumTypes,
		MessageInfos:      file_apigetway_proto_msgTypes,
	}.Build()
	File_apigetway_proto = out.File
	file_apigetway_proto_rawDesc = nil
	file_apigetway_proto_goTypes = nil
	file_apigetway_proto_depIdxs = nil
}
