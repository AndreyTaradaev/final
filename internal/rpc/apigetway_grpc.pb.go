// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc1
// source: apigetway.proto

// имя пакета, в результирующем go-файле это сохраниться

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NewsService_AddNew_FullMethodName   = "/rpc_news.NewsService/AddNew"
	NewsService_AddNews_FullMethodName  = "/rpc_news.NewsService/AddNews"
	NewsService_List_FullMethodName     = "/rpc_news.NewsService/List"
	NewsService_ListPage_FullMethodName = "/rpc_news.NewsService/ListPage"
)

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsServiceClient interface {
	// add news
	AddNew(ctx context.Context, in *ShortNew, opts ...grpc.CallOption) (*Result, error)
	AddNews(ctx context.Context, opts ...grpc.CallOption) (NewsService_AddNewsClient, error)
	// list news
	List(ctx context.Context, in *Forlist, opts ...grpc.CallOption) (NewsService_ListClient, error)
	// вернуть  список новостей на странице
	ListPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (NewsService_ListPageClient, error)
}

type newsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsServiceClient(cc grpc.ClientConnInterface) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) AddNew(ctx context.Context, in *ShortNew, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, NewsService_AddNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) AddNews(ctx context.Context, opts ...grpc.CallOption) (NewsService_AddNewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewsService_ServiceDesc.Streams[0], NewsService_AddNews_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceAddNewsClient{stream}
	return x, nil
}

type NewsService_AddNewsClient interface {
	Send(*ArrayShortNews) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type newsServiceAddNewsClient struct {
	grpc.ClientStream
}

func (x *newsServiceAddNewsClient) Send(m *ArrayShortNews) error {
	return x.ClientStream.SendMsg(m)
}

func (x *newsServiceAddNewsClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newsServiceClient) List(ctx context.Context, in *Forlist, opts ...grpc.CallOption) (NewsService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewsService_ServiceDesc.Streams[1], NewsService_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewsService_ListClient interface {
	Recv() (*ArrayShortNews, error)
	grpc.ClientStream
}

type newsServiceListClient struct {
	grpc.ClientStream
}

func (x *newsServiceListClient) Recv() (*ArrayShortNews, error) {
	m := new(ArrayShortNews)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newsServiceClient) ListPage(ctx context.Context, in *Page, opts ...grpc.CallOption) (NewsService_ListPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewsService_ServiceDesc.Streams[2], NewsService_ListPage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceListPageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewsService_ListPageClient interface {
	Recv() (*ArrayShortNews, error)
	grpc.ClientStream
}

type newsServiceListPageClient struct {
	grpc.ClientStream
}

func (x *newsServiceListPageClient) Recv() (*ArrayShortNews, error) {
	m := new(ArrayShortNews)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewsServiceServer is the server API for NewsService service.
// All implementations must embed UnimplementedNewsServiceServer
// for forward compatibility
type NewsServiceServer interface {
	// add news
	AddNew(context.Context, *ShortNew) (*Result, error)
	AddNews(NewsService_AddNewsServer) error
	// list news
	List(*Forlist, NewsService_ListServer) error
	// вернуть  список новостей на странице
	ListPage(*Page, NewsService_ListPageServer) error
	mustEmbedUnimplementedNewsServiceServer()
}

// UnimplementedNewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (UnimplementedNewsServiceServer) AddNew(context.Context, *ShortNew) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNew not implemented")
}
func (UnimplementedNewsServiceServer) AddNews(NewsService_AddNewsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNews not implemented")
}
func (UnimplementedNewsServiceServer) List(*Forlist, NewsService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNewsServiceServer) ListPage(*Page, NewsService_ListPageServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedNewsServiceServer) mustEmbedUnimplementedNewsServiceServer() {}

// UnsafeNewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServiceServer will
// result in compilation errors.
type UnsafeNewsServiceServer interface {
	mustEmbedUnimplementedNewsServiceServer()
}

func RegisterNewsServiceServer(s grpc.ServiceRegistrar, srv NewsServiceServer) {
	s.RegisterService(&NewsService_ServiceDesc, srv)
}

func _NewsService_AddNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortNew)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AddNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsService_AddNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AddNew(ctx, req.(*ShortNew))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_AddNews_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NewsServiceServer).AddNews(&newsServiceAddNewsServer{stream})
}

type NewsService_AddNewsServer interface {
	SendAndClose(*Result) error
	Recv() (*ArrayShortNews, error)
	grpc.ServerStream
}

type newsServiceAddNewsServer struct {
	grpc.ServerStream
}

func (x *newsServiceAddNewsServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *newsServiceAddNewsServer) Recv() (*ArrayShortNews, error) {
	m := new(ArrayShortNews)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NewsService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Forlist)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewsServiceServer).List(m, &newsServiceListServer{stream})
}

type NewsService_ListServer interface {
	Send(*ArrayShortNews) error
	grpc.ServerStream
}

type newsServiceListServer struct {
	grpc.ServerStream
}

func (x *newsServiceListServer) Send(m *ArrayShortNews) error {
	return x.ServerStream.SendMsg(m)
}

func _NewsService_ListPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Page)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewsServiceServer).ListPage(m, &newsServiceListPageServer{stream})
}

type NewsService_ListPageServer interface {
	Send(*ArrayShortNews) error
	grpc.ServerStream
}

type newsServiceListPageServer struct {
	grpc.ServerStream
}

func (x *newsServiceListPageServer) Send(m *ArrayShortNews) error {
	return x.ServerStream.SendMsg(m)
}

// NewsService_ServiceDesc is the grpc.ServiceDesc for NewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc_news.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNew",
			Handler:    _NewsService_AddNew_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddNews",
			Handler:       _NewsService_AddNews_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _NewsService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPage",
			Handler:       _NewsService_ListPage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apigetway.proto",
}
